workflows:
  android_production:
    name: 🚀 Android Production Build
    environment:
      vars:
        FLUTTER_VERSION: "3.22.2"
        FIREBASE_API_KEY: $FIREBASE_API_KEY
        FIREBASE_APP_ID: $FIREBASE_APP_ID
        FIREBASE_SERVICE_ACCOUNT_JSON: $FIREBASE_SERVICE_ACCOUNT_JSON
    scripts:
      # الخطوة 1: تثبيت Flutter
      - name: ⬇️ تثبيت Flutter
        script: |
          FLUTTER_HOME="$HOME/programs/flutter"
          if [ ! -d "$FLUTTER_HOME" ]; then
            git clone https://github.com/flutter/flutter.git -b $FLUTTER_VERSION $FLUTTER_HOME
          fi
          export PATH="$FLUTTER_HOME/bin:$PATH"
          flutter doctor -v

      # الخطوة 2: إنشاء ملفات Gradle إذا كانت مفقودة
      - name: 🔍 إنشاء ملفات Gradle
        script: |
          if [ ! -f "android/gradlew" ]; then
            echo "⚠️ جاري إنشاء ملفات Gradle الأساسية..."
            mkdir -p android
            cd android
            gradle wrapper --gradle-version 7.5
            cd ..
            chmod +x android/gradlew
            echo "✅ تم إنشاء ملفات Gradle بنجاح!"
          else
            echo "✔️ ملفات Gradle موجودة بالفعل."
          fi

      # الخطوة 3: إصلاح ملفات البناء
      - name: 🔧 إصلاح ملفات البناء
        script: |
          # إنشاء ملفات البناء إذا لم تكن موجودة
          if [ ! -f "android/build.gradle" ]; then
            flutter create --platforms android .
          fi

          # تحديث إعدادات Gradle
          sed -i '' 's/com.android.tools.build:gradle:[0-9\.]*/com.android.tools.build:gradle:7.3.0/g' android/build.gradle
          sed -i '' 's/compileSdkVersion [0-9]*/compileSdkVersion 34/g' android/app/build.gradle
          sed -i '' 's/targetSdkVersion [0-9]*/targetSdkVersion 34/g' android/app/build.gradle
          sed -i '' 's/minSdkVersion [0-9]*/minSdkVersion 21/g' android/app/build.gradle

      # الخطوة 4: إعداد البيئة
      - name: 🛠️ إعداد البيئة
        script: |
          npm install -g firebase-tools@latest --force --unsafe-perm

      # الخطوة 5: تحديث التبعيات
      - name: 🔄 تحديث التبعيات
        script: |
          flutter pub get
          
          # التحقق من وجود gradlew ومنح صلاحيات التنفيذ
          if [ -f "android/gradlew" ]; then
            chmod +x android/gradlew
            ./android/gradlew clean -p android
          else
            echo "❌ ملف gradlew غير موجود!"
            exit 1
          fi

      # الخطوة 6: بناء APK
      - name: 🏗️ بناء APK
        script: |
          set -e
          flutter build apk --release \
            --dart-define=FIREBASE_API_KEY=$FIREBASE_API_KEY \
            --dart-define=FIREBASE_APP_ID=$FIREBASE_APP_ID \
            --split-debug-info=./debug_info \
            --verbose

          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "❌ فشل البناء - لم يتم إنشاء APK"
            exit 1
          fi

      # الخطوة 7: النشر على Firebase
      - name: 📤 نشر على Firebase
        script: |
          echo "$FIREBASE_SERVICE_ACCOUNT_JSON" > /tmp/service-account.json
          firebase appdistribution:distribute \
            build/app/outputs/flutter-apk/app-release.apk \
            --app $FIREBASE_APP_ID \
            --service-account-json /tmp/service-account.json \
            --groups "testers" \
            --debug
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - debug_info/**
    publishing:
      email:
        recipients:
          - "your.email@example.com"
    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.pub-cache
