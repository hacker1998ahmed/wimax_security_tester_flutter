workflows:
  android_production:
    name: 🚀 Android Production Build
    environment:
      vars:
        FLUTTER_VERSION: "3.22.2"
        FIREBASE_API_KEY: $FIREBASE_API_KEY
        FIREBASE_APP_ID: $FIREBASE_APP_ID
        FIREBASE_SERVICE_ACCOUNT_JSON: $FIREBASE_SERVICE_ACCOUNT_JSON
    scripts:
      # الخطوة 1: تثبيت Flutter
      - name: ⬇️ تثبيت Flutter
        script: |
          FLUTTER_HOME="$HOME/programs/flutter"
          if [ ! -d "$FLUTTER_HOME" ]; then
            git clone https://github.com/flutter/flutter.git -b $FLUTTER_VERSION $FLUTTER_HOME
          fi
          export PATH="$FLUTTER_HOME/bin:$PATH"
          flutter doctor -v

      # الخطوة 2: تحديث ملفات البناء
      - name: 🔧 تحديث ملفات البناء
        script: |
          # إنشاء ملفات البناء إذا كانت مفقودة
          if [ ! -f "android/build.gradle" ]; then
            flutter create --platforms android .
          fi

          # تحديث android/build.gradle
          cat <<EOT > android/build.gradle
          buildscript {
              ext.kotlin_version = '1.9.22'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.3.0'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:\$kotlin_version"
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }

          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOT

          # تحديث android/app/build.gradle
          cat <<EOT > android/app/build.gradle
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }

          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }

          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in local.properties.")
          }

          android {
              compileSdkVersion 34
              ndkVersion flutter.ndkVersion

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }

              kotlinOptions {
                  jvmTarget = '17'
              }

              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }

              defaultConfig {
                  applicationId "com.example.wimax_security_tester"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"
              }

              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }

          flutter {
              source '../..'
          }

          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:\$kotlin_version"
          }
          EOT

          # إزالة إعداد R8 من gradle.properties إذا وجد
          if [ -f "android/gradle.properties" ]; then
              sed -i '' '/android.enableR8/d' android/gradle.properties
          fi

      # الخطوة 3: إعداد البيئة
      - name: 🛠️ إعداد البيئة
        script: |
          npm install -g firebase-tools@latest --force --unsafe-perm

      # الخطوة 4: تحديث التبعيات
      - name: 🔄 تحديث التبعيات
        script: |
          flutter pub get
          ./android/gradlew clean -p android

      # الخطوة 5: بناء APK
      - name: 🏗️ بناء APK
        script: |
          set -e
          flutter build apk --release \
            --dart-define=FIREBASE_API_KEY=$FIREBASE_API_KEY \
            --dart-define=FIREBASE_APP_ID=$FIREBASE_APP_ID \
            --split-debug-info=./debug_info \
            --verbose

          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "❌ فشل البناء - لم يتم إنشاء APK"
            exit 1
          fi

      # الخطوة 6: النشر على Firebase
      - name: 📤 نشر على Firebase
        script: |
          echo "$FIREBASE_SERVICE_ACCOUNT_JSON" > /tmp/service-account.json
          firebase appdistribution:distribute \
            build/app/outputs/flutter-apk/app-release.apk \
            --app $FIREBASE_APP_ID \
            --service-account-json /tmp/service-account.json \
            --groups "testers" \
            --debug
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - debug_info/**
    publishing:
      email:
        recipients:
          - "your.email@example.com"
    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.pub-cache
